@page "/product"
@using ProductApi.Models
@using System.Text.Json
@using System.Text
@inject IProductDataStore  _productDataStore
@inject IHttpClientFactory Factory

@rendermode InteractiveServer
<h3>Product</h3>
<!--
   
-->
<!-- Render products -->
<div>

 



    @if (products == null)
    {
        <p>No products available or error fetching data.</p>
    }
    else
    {
        @foreach (var product in products)
        {
            <p>@product.product_id. @product.product_name</p>
        }
    }
</div>

  <button class="btn btn-primary" @onclick="PostProduct">Click to add product</button>
<button class="btn btn-primary" @onclick="GetSpecificProduct">Click to get product</button>
<button class="btn btn-primary" @onclick="DeleteProduct">Click to delete product</button>
@code {
    List<ProductModel> products = new List<ProductModel>();

    HttpClient ProductApi;
    private async Task PostProduct()
    {
        // ProductApi.BaseAddress = new Uri("https://localhost:7023/api/Product/");
        string productName = "keyboard"; // Set your product name here or get it dynamically

        var product = new ProductModel { product_name = productName }; // Assuming ProductModel has a property for product_name

        HttpResponseMessage response = await ProductApi.PostAsJsonAsync("Product/postProduct", product);

        if (response.IsSuccessStatusCode)
        {
            await GetProduct();
        }
        // method is able to create a product
    }


    private async Task GetSpecificProduct()
    {
        int productID = 1;

        HttpResponseMessage response = await ProductApi.GetAsync($"Product/{productID}");


        if (response.IsSuccessStatusCode)
        {
            var responseData = await response.Content.ReadFromJsonAsync<List<ProductModel>>();
            await GetProduct();
            products = responseData;
        }

        //methods is able to return the product
    }

    private async Task DeleteProduct()
    {
        int productID = 1;

        HttpResponseMessage response = await ProductApi.DeleteAsync($"Product/{productID}");

        if (response.IsSuccessStatusCode)
        {
            var responseData = await response.Content.ReadFromJsonAsync<List<ProductModel>>();
            products = responseData;
            await GetProduct();
        }

        // method is working 
    }


    private async Task GetProduct()
    {

        HttpResponseMessage response = await ProductApi.GetAsync("Product");

        if (response.IsSuccessStatusCode)
        {
            var responseData = await response.Content.ReadFromJsonAsync<List<ProductModel>>();
            products = responseData;

        }
        //method is able to return all the products

    }

    protected override async Task OnInitializedAsync()
    {
         ProductApi = Factory.CreateClient("ProductApi");
        await GetProduct();
    }
}
