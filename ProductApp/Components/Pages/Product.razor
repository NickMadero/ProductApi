@page "/product"
@using ProductApi.Models
@using System.Text.Json
@using System.Text
@inject IProductDataStore  _productDataStore
@inject IHttpClientFactory Factory
@using Newtonsoft.Json
@rendermode InteractiveServer
<h3>Product</h3>
<!--
   
-->
<!-- Render products -->
<div>



    @if (products == null)
    {
        <p>No products available or error fetching data.</p>
    }
    else
    {
        @foreach (var product in products)
        {
            <p>@product.product_id. @product.product_name</p>
        }
    }
</div>


<input @bind="productName" placeholder="add new product" />
  <button class="btn btn-primary" @onclick="() =>PostProduct(productName)">Click to add product</button>


<input @bind="productId" placeholder="search product number" />
<button class="btn btn-primary"  @onclick="() => GetSpecificProduct(productId)">Click to get product</button>

<input @bind="productId" placeholder="delete product number" />
<button class="btn btn-primary" @onclick="() => DeleteProduct(productId)">Click to delete product</button>
@code {
    List<ProductModel> products = new List<ProductModel>();

    HttpClient ProductApi;

    string productId = "";
    string productName = "";

    private async Task PostProduct(string productName)
    {
        try
        {
            var productModel = new ProductModel() {product_name = productName};

            var contentData = new StringContent(JsonConvert.SerializeObject(productModel), Encoding.UTF8, "application/json");

            HttpResponseMessage response = await ProductApi.PostAsync("Product/postProduct", contentData);

            string responseContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Response Content: {responseContent}");
           
            if (response.IsSuccessStatusCode)
            {
                await GetProduct();
                productName = "";
            }
            else
            {
                // Handle error scenarios
                Console.WriteLine($"Error: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }



    private async Task GetSpecificProduct(string id)
    {
        int.Parse(id);

        HttpResponseMessage response = await ProductApi.GetAsync($"Product/{id}");


        if (response.IsSuccessStatusCode)
        {
            var responseData = await response.Content.ReadFromJsonAsync<List<ProductModel>>();
            await GetProduct();
            products = responseData;
            productId = "";
        }

        //methods is able to return the product
    }

    private async Task DeleteProduct(string id)
    {
        int.Parse(id);
       

        HttpResponseMessage response = await ProductApi.DeleteAsync($"Product/{id}");

        if (response.IsSuccessStatusCode)
        {
            productId = "";
            await GetProduct();
        }

        // method is working 
    }


    private async Task GetProduct()
    {

        HttpResponseMessage response = await ProductApi.GetAsync("Product");

        if (response.IsSuccessStatusCode)
        {
            var responseData = await response.Content.ReadFromJsonAsync<List<ProductModel>>();
            products = responseData;

        }
        //method is able to return all the products

    }

    protected override async Task OnInitializedAsync()
    {
         ProductApi = Factory.CreateClient("ProductApi");
        await GetProduct();
    }
}
